Big tasks:
* Blame
* Autocomplete
* Display links to nearby methods in sidebar
* Faster!
* router.py needs to be much more scalable

UI:
! Help file as home page
* Crossref result matches in bold
* Get rid of Nunjucks (context menu)
* "Search substring" context menu option
* Allow "locking on" a given highlighted symbol (from Kris)
* Incrementally load search results for less jank

AWS:
! Automatic indexing
! Error reporting
* Better security
* Multiple web hosts for performance

C++ indexing:
? Multiple inheritance
? Indexing types
* Index specialized types (templated, etc.)
* Index global variables, enums, macros
* Better indexing with inheritance (don't just search from root method)

JS indexing:
* Class support
* Other indexing improvements?
* Indexing of test files

Other indexing:
* IPDL
* HTML
* WebIDL?

IDL:
* Need to index <handler> directives.


Searching for declarations:
Perhaps I'll make an index file that can be used to augment the full text search.
This would be similar to augmenting it with filenames.
When doing the analysis, a given decl would generate a fully-qualified name and a line/column number.
This could be a separate kind of analysis line; maybe it could be called "index". I could
also use this for JS, where you could search for ClassName.PropertyName.
The search feature would probably just grep through this file since I want to allow substring searches.
Not sure if that would be fast enough, but it might not be too bad. It would just be defs.
Or I could put in each level of qualification as a separate thing, and they would have to type
a prefix. That way I could do a binary search, which would be much faster.
